// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const createMovie = `-- name: CreateMovie :exec
INSERT INTO movies (
 title, description, genre, showtime, seats, poster 
) VALUES ( $1, $2, $3,$4,$5,$6)
`

type CreateMovieParams struct {
	Title       string
	Description string
	Genre       string
	Showtime    time.Time
	Seats       int32
	Poster      string
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) error {
	_, err := q.db.ExecContext(ctx, createMovie,
		arg.Title,
		arg.Description,
		arg.Genre,
		arg.Showtime,
		arg.Seats,
		arg.Poster,
	)
	return err
}

const createReservation = `-- name: CreateReservation :exec
INSERT INTO reservations (
  userid, movieid
) VALUES ( $1, $2)
`

type CreateReservationParams struct {
	Userid  int32
	Movieid int32
}

func (q *Queries) CreateReservation(ctx context.Context, arg CreateReservationParams) error {
	_, err := q.db.ExecContext(ctx, createReservation, arg.Userid, arg.Movieid)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
  name, email, password 
) VALUES ( $1, $2, $3 )
`

type CreateUserParams struct {
	Name     string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Name, arg.Email, arg.Password)
	return err
}

const getMovie = `-- name: GetMovie :one
SELECT id, title, description, genre, showtime, seats, poster 
  FROM movies 
  WHERE movies.title = $1
`

func (q *Queries) GetMovie(ctx context.Context, title string) (Movie, error) {
	row := q.db.QueryRowContext(ctx, getMovie, title)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Genre,
		&i.Showtime,
		&i.Seats,
		&i.Poster,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, password, isadmin FROM users 
WHERE users.id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Isadmin,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, name, email, password, isadmin
  FROM users 
  WHERE users.name = $1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Isadmin,
	)
	return i, err
}
